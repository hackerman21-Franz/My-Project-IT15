@model List<MyProjectIT15.Models.Billing>

@{
    ViewBag.Title = "Billing History";
}

<div class="container py-5">
    <div class="d-flex justify-content-between align-items-center mb-4 flex-wrap gap-3">
        <div>
            <h2 class="fw-bold mb-0">@ViewBag.Title</h2>
            <p class="text-muted small mb-0">View and track all generated bills, due dates, and billing status.</p>
        </div>

        <div class="d-flex gap-2 flex-wrap">
            <a class="btn btn-outline-secondary rounded px-4" asp-controller="Meter" asp-action="Billings">
                <i class="bi bi-arrow-left-circle me-1"></i> Back
            </a>
        </div>
    </div>

    <div class="card shadow-sm border-0 rounded-4 mb-4">
        <div class="card-body p-3">
            <div class="row align-items-center">
                <div class="col-md-8">
                    <label class="form-label">Search Billing History</label>
                    <div class="input-group">
                        <input type="text" id="searchInput" class="form-control" placeholder="Search by tenant name, room meter ID, or date (MMM dd, yyyy)">
                    </div>
                </div>
                <div class="col-md-4 mt-2 mt-md-0">
                    <label class="form-label">Filter by Status</label>
                    <select id="statusFilter" class="form-select">
                        <option value="All">All Statuses</option>
                        <option value="Paid">Paid</option>
                        <option value="Unpaid">Unpaid</option>
                    </select>
                </div>
            </div>
        </div>
    </div>

    <div class="card shadow-sm border-0 rounded-4">
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover table-borderless align-middle mb-0">
                    <thead class="bg-light text-secondary small text-uppercase">
                        <tr>
                            <th>ID</th>
                            <th>Tenant Name</th>
                            <th>Room Meter ID</th>
                            <th>Reading Date</th>
                            <th>Due Date</th>
                            <th>Total Amount</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody id="billingTableBody">
                        @if (Model != null && Model.Any())
                        {
                            foreach (var billing in Model)
                            {
                                <tr data-status="@billing.Status.ToLower()">
                                    <td>@billing.Id</td>
                                    <td data-searchable="@($"{billing.User?.FirstName} {billing.User?.MiddleName} {billing.User?.LastName}")">
                                        @(
                                            billing.User != null
                                            ? $"{billing.User.FirstName} {billing.User.MiddleName} {billing.User.LastName}"
                                            : "No Tenant"
                                            )
                                    </td>
                                    <td data-searchable="@billing.MeterReading?.RoomMeterId">@billing.MeterReading?.RoomMeterId</td>
                                    <td data-searchable="@billing.ReadingDate.ToString("MMM dd, yyyy")">@billing.ReadingDate.ToString("MMM dd, yyyy")</td>
                                    <td data-searchable="@billing.DueDate.ToString("MMM dd, yyyy")">@billing.DueDate.ToString("MMM dd, yyyy")</td>
                                    <td>₱ @billing.TotalAmount.ToString("N2")</td>
                                    <td>
                                        <span class="badge @(billing.Status.ToLower() == "unpaid" ? "bg-warning text-dark" : "bg-success") rounded-pill">
                                            @billing.Status
                                        </span>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="7" class="text-center text-muted py-4">No billing records found.</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const searchInput = document.getElementById('searchInput');
            const clearSearch = document.getElementById('clearSearch');
            const statusFilter = document.getElementById('statusFilter');
            const billingTableBody = document.getElementById('billingTableBody');
            const rows = billingTableBody.querySelectorAll('tr[data-status]');

            function filterTable() {
                const searchTerm = searchInput.value.toLowerCase();
                const statusValue = statusFilter.value.toLowerCase();

                rows.forEach(row => {
                    const rowStatus = row.getAttribute('data-status');
                    const cells = row.querySelectorAll('td[data-searchable]');
                    let searchMatch = false;
                    let statusMatch = statusValue === 'all' || rowStatus === statusValue;

                    // If there's a search term, check for matches
                    if (searchTerm) {
                        cells.forEach(cell => {
                            const cellText = cell.getAttribute('data-searchable').toLowerCase();
                            if (cellText.includes(searchTerm)) {
                                searchMatch = true;
                            }
                        });
                    } else {
                        searchMatch = true; // No search term means show all (if status matches)
                    }

                    row.style.display = (searchMatch && statusMatch) ? '' : 'none';
                });

                // Show/hide the "no records" message if all rows are filtered out
                const visibleRows = billingTableBody.querySelectorAll('tr[data-status][style=""]');
                const noRecordsRow = billingTableBody.querySelector('tr[colspan]');

                if (noRecordsRow) {
                    noRecordsRow.style.display = visibleRows.length === 0 ? '' : 'none';
                }
            }

            searchInput.addEventListener('input', filterTable);
            statusFilter.addEventListener('change', filterTable);

            clearSearch.addEventListener('click', function () {
                searchInput.value = '';
                filterTable();
            });

            // Initial filter in case there's a default status selected
            filterTable();
        });
    </script>
}

<style>
    .btn {
        font-size: 0.9rem;
    }

    .table th,
    .table td {
        vertical-align: middle;
    }

    .card {
        overflow: hidden;
    }

    .badge {
        font-size: 0.75rem;
        padding: 0.4em 0.7em;
    }

    .btn-sm i {
        vertical-align: middle;
    }
</style>